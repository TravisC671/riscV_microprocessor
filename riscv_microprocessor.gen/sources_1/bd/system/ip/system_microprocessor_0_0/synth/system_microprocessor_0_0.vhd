-- (c) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- (c) Copyright 2022-2025 Advanced Micro Devices, Inc. All rights reserved.
-- 
-- This file contains confidential and proprietary information
-- of AMD and is protected under U.S. and international copyright
-- and other intellectual property laws.
-- 
-- DISCLAIMER
-- This disclaimer is not a license and does not grant any
-- rights to the materials distributed herewith. Except as
-- otherwise provided in a valid license issued to you by
-- AMD, and to the maximum extent permitted by applicable
-- law: (1) THESE MATERIALS ARE MADE AVAILABLE "AS IS" AND
-- WITH ALL FAULTS, AND AMD HEREBY DISCLAIMS ALL WARRANTIES
-- AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY, INCLUDING
-- BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-
-- INFRINGEMENT, OR FITNESS FOR ANY PARTICULAR PURPOSE; and
-- (2) AMD shall not be liable (whether in contract or tort,
-- including negligence, or under any other theory of
-- liability) for any loss or damage of any kind or nature
-- related to, arising under or in connection with these
-- materials, including for any direct, or any indirect,
-- special, incidental, or consequential loss or damage
-- (including loss of data, profits, goodwill, or any type of
-- loss or damage suffered as a result of any action brought
-- by a third party) even if such damage or loss was
-- reasonably foreseeable or AMD had been advised of the
-- possibility of the same.
-- 
-- CRITICAL APPLICATIONS
-- AMD products are not designed or intended to be fail-
-- safe, or for use in any application requiring fail-safe
-- performance, such as life-support or safety devices or
-- systems, Class III medical devices, nuclear facilities,
-- applications related to the deployment of airbags, or any
-- other applications that could lead to death, personal
-- injury, or severe property or environmental damage
-- (individually and collectively, "Critical
-- Applications"). Customer assumes the sole risk and
-- liability of any use of AMD products in Critical
-- Applications, subject only to applicable laws and
-- regulations governing limitations on product liability.
-- 
-- THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS
-- PART OF THIS FILE AT ALL TIMES.
-- 
-- DO NOT MODIFY THIS FILE.

-- IP VLNV: xilinx.com:module_ref:microprocessor:1.0
-- IP Revision: 1

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
USE ieee.numeric_std.ALL;

ENTITY system_microprocessor_0_0 IS
  PORT (
    CLK : IN STD_LOGIC;
    RESET : IN STD_LOGIC;
    I_M_AXI_AWID : OUT STD_LOGIC_VECTOR(0 DOWNTO 0);
    I_M_AXI_AWADDR : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
    I_M_AXI_AWLEN : OUT STD_LOGIC_VECTOR(7 DOWNTO 0);
    I_M_AXI_AWSIZE : OUT STD_LOGIC_VECTOR(2 DOWNTO 0);
    I_M_AXI_AWBURST : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
    I_M_AXI_AWLOCK : OUT STD_LOGIC;
    I_M_AXI_AWCACHE : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
    I_M_AXI_AWPROT : OUT STD_LOGIC_VECTOR(2 DOWNTO 0);
    I_M_AXI_AWQOS : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
    I_M_AXI_AWUSER : OUT STD_LOGIC_VECTOR(0 DOWNTO 0);
    I_M_AXI_AWVALID : OUT STD_LOGIC;
    I_M_AXI_AWREADY : IN STD_LOGIC;
    I_M_AXI_WDATA : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
    I_M_AXI_WSTRB : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
    I_M_AXI_WLAST : OUT STD_LOGIC;
    I_M_AXI_WUSER : OUT STD_LOGIC_VECTOR(0 DOWNTO 0);
    I_M_AXI_WVALID : OUT STD_LOGIC;
    I_M_AXI_WREADY : IN STD_LOGIC;
    I_M_AXI_BID : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
    I_M_AXI_BRESP : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
    I_M_AXI_BUSER : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
    I_M_AXI_BVALID : IN STD_LOGIC;
    I_M_AXI_BREADY : OUT STD_LOGIC;
    I_M_AXI_ARID : OUT STD_LOGIC_VECTOR(0 DOWNTO 0);
    I_M_AXI_ARADDR : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
    I_M_AXI_ARLEN : OUT STD_LOGIC_VECTOR(7 DOWNTO 0);
    I_M_AXI_ARSIZE : OUT STD_LOGIC_VECTOR(2 DOWNTO 0);
    I_M_AXI_ARBURST : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
    I_M_AXI_ARLOCK : OUT STD_LOGIC;
    I_M_AXI_ARCACHE : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
    I_M_AXI_ARPROT : OUT STD_LOGIC_VECTOR(2 DOWNTO 0);
    I_M_AXI_ARQOS : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
    I_M_AXI_ARUSER : OUT STD_LOGIC_VECTOR(0 DOWNTO 0);
    I_M_AXI_ARVALID : OUT STD_LOGIC;
    I_M_AXI_ARREADY : IN STD_LOGIC;
    I_M_AXI_RID : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
    I_M_AXI_RDATA : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
    I_M_AXI_RRESP : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
    I_M_AXI_RLAST : IN STD_LOGIC;
    I_M_AXI_RUSER : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
    I_M_AXI_RVALID : IN STD_LOGIC;
    I_M_AXI_RREADY : OUT STD_LOGIC;
    D_M_AXI_AWID : OUT STD_LOGIC_VECTOR(0 DOWNTO 0);
    D_M_AXI_AWADDR : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
    D_M_AXI_AWLEN : OUT STD_LOGIC_VECTOR(7 DOWNTO 0);
    D_M_AXI_AWSIZE : OUT STD_LOGIC_VECTOR(2 DOWNTO 0);
    D_M_AXI_AWBURST : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
    D_M_AXI_AWLOCK : OUT STD_LOGIC;
    D_M_AXI_AWCACHE : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
    D_M_AXI_AWPROT : OUT STD_LOGIC_VECTOR(2 DOWNTO 0);
    D_M_AXI_AWQOS : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
    D_M_AXI_AWUSER : OUT STD_LOGIC_VECTOR(0 DOWNTO 0);
    D_M_AXI_AWVALID : OUT STD_LOGIC;
    D_M_AXI_AWREADY : IN STD_LOGIC;
    D_M_AXI_WDATA : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
    D_M_AXI_WSTRB : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
    D_M_AXI_WLAST : OUT STD_LOGIC;
    D_M_AXI_WUSER : OUT STD_LOGIC_VECTOR(0 DOWNTO 0);
    D_M_AXI_WVALID : OUT STD_LOGIC;
    D_M_AXI_WREADY : IN STD_LOGIC;
    D_M_AXI_BID : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
    D_M_AXI_BRESP : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
    D_M_AXI_BUSER : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
    D_M_AXI_BVALID : IN STD_LOGIC;
    D_M_AXI_BREADY : OUT STD_LOGIC;
    D_M_AXI_ARID : OUT STD_LOGIC_VECTOR(0 DOWNTO 0);
    D_M_AXI_ARADDR : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
    D_M_AXI_ARLEN : OUT STD_LOGIC_VECTOR(7 DOWNTO 0);
    D_M_AXI_ARSIZE : OUT STD_LOGIC_VECTOR(2 DOWNTO 0);
    D_M_AXI_ARBURST : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
    D_M_AXI_ARLOCK : OUT STD_LOGIC;
    D_M_AXI_ARCACHE : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
    D_M_AXI_ARPROT : OUT STD_LOGIC_VECTOR(2 DOWNTO 0);
    D_M_AXI_ARQOS : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
    D_M_AXI_ARUSER : OUT STD_LOGIC_VECTOR(0 DOWNTO 0);
    D_M_AXI_ARVALID : OUT STD_LOGIC;
    D_M_AXI_ARREADY : IN STD_LOGIC;
    D_M_AXI_RID : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
    D_M_AXI_RDATA : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
    D_M_AXI_RRESP : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
    D_M_AXI_RLAST : IN STD_LOGIC;
    D_M_AXI_RUSER : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
    D_M_AXI_RVALID : IN STD_LOGIC;
    D_M_AXI_RREADY : OUT STD_LOGIC
  );
END system_microprocessor_0_0;

ARCHITECTURE system_microprocessor_0_0_arch OF system_microprocessor_0_0 IS
  ATTRIBUTE DowngradeIPIdentifiedWarnings : STRING;
  ATTRIBUTE DowngradeIPIdentifiedWarnings OF system_microprocessor_0_0_arch: ARCHITECTURE IS "yes";
  COMPONENT microprocessor IS
    GENERIC (
      C_M_TARGET_SLAVE_BASE_ADDR : STD_LOGIC_VECTOR;
      C_M_AXI_BURST_LEN : INTEGER;
      C_M_AXI_ID_WIDTH : INTEGER;
      C_M_AXI_ADDR_WIDTH : INTEGER;
      C_M_AXI_DATA_WIDTH : INTEGER;
      C_M_AXI_AWUSER_WIDTH : INTEGER;
      C_M_AXI_ARUSER_WIDTH : INTEGER;
      C_M_AXI_WUSER_WIDTH : INTEGER;
      C_M_AXI_RUSER_WIDTH : INTEGER;
      C_M_AXI_BUSER_WIDTH : INTEGER
    );
    PORT (
      CLK : IN STD_LOGIC;
      RESET : IN STD_LOGIC;
      I_M_AXI_AWID : OUT STD_LOGIC_VECTOR(0 DOWNTO 0);
      I_M_AXI_AWADDR : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      I_M_AXI_AWLEN : OUT STD_LOGIC_VECTOR(7 DOWNTO 0);
      I_M_AXI_AWSIZE : OUT STD_LOGIC_VECTOR(2 DOWNTO 0);
      I_M_AXI_AWBURST : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
      I_M_AXI_AWLOCK : OUT STD_LOGIC;
      I_M_AXI_AWCACHE : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
      I_M_AXI_AWPROT : OUT STD_LOGIC_VECTOR(2 DOWNTO 0);
      I_M_AXI_AWQOS : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
      I_M_AXI_AWUSER : OUT STD_LOGIC_VECTOR(0 DOWNTO 0);
      I_M_AXI_AWVALID : OUT STD_LOGIC;
      I_M_AXI_AWREADY : IN STD_LOGIC;
      I_M_AXI_WDATA : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      I_M_AXI_WSTRB : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
      I_M_AXI_WLAST : OUT STD_LOGIC;
      I_M_AXI_WUSER : OUT STD_LOGIC_VECTOR(0 DOWNTO 0);
      I_M_AXI_WVALID : OUT STD_LOGIC;
      I_M_AXI_WREADY : IN STD_LOGIC;
      I_M_AXI_BID : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
      I_M_AXI_BRESP : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
      I_M_AXI_BUSER : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
      I_M_AXI_BVALID : IN STD_LOGIC;
      I_M_AXI_BREADY : OUT STD_LOGIC;
      I_M_AXI_ARID : OUT STD_LOGIC_VECTOR(0 DOWNTO 0);
      I_M_AXI_ARADDR : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      I_M_AXI_ARLEN : OUT STD_LOGIC_VECTOR(7 DOWNTO 0);
      I_M_AXI_ARSIZE : OUT STD_LOGIC_VECTOR(2 DOWNTO 0);
      I_M_AXI_ARBURST : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
      I_M_AXI_ARLOCK : OUT STD_LOGIC;
      I_M_AXI_ARCACHE : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
      I_M_AXI_ARPROT : OUT STD_LOGIC_VECTOR(2 DOWNTO 0);
      I_M_AXI_ARQOS : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
      I_M_AXI_ARUSER : OUT STD_LOGIC_VECTOR(0 DOWNTO 0);
      I_M_AXI_ARVALID : OUT STD_LOGIC;
      I_M_AXI_ARREADY : IN STD_LOGIC;
      I_M_AXI_RID : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
      I_M_AXI_RDATA : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      I_M_AXI_RRESP : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
      I_M_AXI_RLAST : IN STD_LOGIC;
      I_M_AXI_RUSER : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
      I_M_AXI_RVALID : IN STD_LOGIC;
      I_M_AXI_RREADY : OUT STD_LOGIC;
      D_M_AXI_AWID : OUT STD_LOGIC_VECTOR(0 DOWNTO 0);
      D_M_AXI_AWADDR : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      D_M_AXI_AWLEN : OUT STD_LOGIC_VECTOR(7 DOWNTO 0);
      D_M_AXI_AWSIZE : OUT STD_LOGIC_VECTOR(2 DOWNTO 0);
      D_M_AXI_AWBURST : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
      D_M_AXI_AWLOCK : OUT STD_LOGIC;
      D_M_AXI_AWCACHE : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
      D_M_AXI_AWPROT : OUT STD_LOGIC_VECTOR(2 DOWNTO 0);
      D_M_AXI_AWQOS : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
      D_M_AXI_AWUSER : OUT STD_LOGIC_VECTOR(0 DOWNTO 0);
      D_M_AXI_AWVALID : OUT STD_LOGIC;
      D_M_AXI_AWREADY : IN STD_LOGIC;
      D_M_AXI_WDATA : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      D_M_AXI_WSTRB : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
      D_M_AXI_WLAST : OUT STD_LOGIC;
      D_M_AXI_WUSER : OUT STD_LOGIC_VECTOR(0 DOWNTO 0);
      D_M_AXI_WVALID : OUT STD_LOGIC;
      D_M_AXI_WREADY : IN STD_LOGIC;
      D_M_AXI_BID : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
      D_M_AXI_BRESP : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
      D_M_AXI_BUSER : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
      D_M_AXI_BVALID : IN STD_LOGIC;
      D_M_AXI_BREADY : OUT STD_LOGIC;
      D_M_AXI_ARID : OUT STD_LOGIC_VECTOR(0 DOWNTO 0);
      D_M_AXI_ARADDR : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      D_M_AXI_ARLEN : OUT STD_LOGIC_VECTOR(7 DOWNTO 0);
      D_M_AXI_ARSIZE : OUT STD_LOGIC_VECTOR(2 DOWNTO 0);
      D_M_AXI_ARBURST : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
      D_M_AXI_ARLOCK : OUT STD_LOGIC;
      D_M_AXI_ARCACHE : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
      D_M_AXI_ARPROT : OUT STD_LOGIC_VECTOR(2 DOWNTO 0);
      D_M_AXI_ARQOS : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
      D_M_AXI_ARUSER : OUT STD_LOGIC_VECTOR(0 DOWNTO 0);
      D_M_AXI_ARVALID : OUT STD_LOGIC;
      D_M_AXI_ARREADY : IN STD_LOGIC;
      D_M_AXI_RID : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
      D_M_AXI_RDATA : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      D_M_AXI_RRESP : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
      D_M_AXI_RLAST : IN STD_LOGIC;
      D_M_AXI_RUSER : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
      D_M_AXI_RVALID : IN STD_LOGIC;
      D_M_AXI_RREADY : OUT STD_LOGIC
    );
  END COMPONENT microprocessor;
  ATTRIBUTE X_CORE_INFO : STRING;
  ATTRIBUTE X_CORE_INFO OF system_microprocessor_0_0_arch: ARCHITECTURE IS "microprocessor,Vivado 2025.1";
  ATTRIBUTE CHECK_LICENSE_TYPE : STRING;
  ATTRIBUTE CHECK_LICENSE_TYPE OF system_microprocessor_0_0_arch : ARCHITECTURE IS "system_microprocessor_0_0,microprocessor,{}";
  ATTRIBUTE CORE_GENERATION_INFO : STRING;
  ATTRIBUTE CORE_GENERATION_INFO OF system_microprocessor_0_0_arch: ARCHITECTURE IS "system_microprocessor_0_0,microprocessor,{x_ipProduct=Vivado 2025.1,x_ipVendor=xilinx.com,x_ipLibrary=module_ref,x_ipName=microprocessor,x_ipVersion=1.0,x_ipCoreRevision=1,x_ipLanguage=VHDL,x_ipSimLanguage=MIXED,C_M_TARGET_SLAVE_BASE_ADDR=0x00000000,C_M_AXI_BURST_LEN=1,C_M_AXI_ID_WIDTH=1,C_M_AXI_ADDR_WIDTH=32,C_M_AXI_DATA_WIDTH=32,C_M_AXI_AWUSER_WIDTH=1,C_M_AXI_ARUSER_WIDTH=1,C_M_AXI_WUSER_WIDTH=1,C_M_AXI_RUSER_WIDTH=1,C_M_AXI_BUSER_WIDTH=1}";
  ATTRIBUTE IP_DEFINITION_SOURCE : STRING;
  ATTRIBUTE IP_DEFINITION_SOURCE OF system_microprocessor_0_0_arch: ARCHITECTURE IS "module_ref";
  ATTRIBUTE X_INTERFACE_INFO : STRING;
  ATTRIBUTE X_INTERFACE_MODE : STRING;
  ATTRIBUTE X_INTERFACE_PARAMETER : STRING;
  ATTRIBUTE X_INTERFACE_INFO OF CLK: SIGNAL IS "xilinx.com:signal:clock:1.0 CLK CLK";
  ATTRIBUTE X_INTERFACE_MODE OF CLK: SIGNAL IS "slave CLK";
  ATTRIBUTE X_INTERFACE_PARAMETER OF CLK: SIGNAL IS "XIL_INTERFACENAME CLK, ASSOCIATED_BUSIF D_M_AXI:I_M_AXI, ASSOCIATED_RESET RESET, FREQ_HZ 100000000, FREQ_TOLERANCE_HZ 0, PHASE 0.0, CLK_DOMAIN /clk_wiz_clk_out1, INSERT_VIP 0";
  ATTRIBUTE X_INTERFACE_INFO OF D_M_AXI_ARADDR: SIGNAL IS "xilinx.com:interface:aximm:1.0 D_M_AXI ARADDR";
  ATTRIBUTE X_INTERFACE_INFO OF D_M_AXI_ARBURST: SIGNAL IS "xilinx.com:interface:aximm:1.0 D_M_AXI ARBURST";
  ATTRIBUTE X_INTERFACE_INFO OF D_M_AXI_ARCACHE: SIGNAL IS "xilinx.com:interface:aximm:1.0 D_M_AXI ARCACHE";
  ATTRIBUTE X_INTERFACE_INFO OF D_M_AXI_ARID: SIGNAL IS "xilinx.com:interface:aximm:1.0 D_M_AXI ARID";
  ATTRIBUTE X_INTERFACE_INFO OF D_M_AXI_ARLEN: SIGNAL IS "xilinx.com:interface:aximm:1.0 D_M_AXI ARLEN";
  ATTRIBUTE X_INTERFACE_INFO OF D_M_AXI_ARLOCK: SIGNAL IS "xilinx.com:interface:aximm:1.0 D_M_AXI ARLOCK";
  ATTRIBUTE X_INTERFACE_INFO OF D_M_AXI_ARPROT: SIGNAL IS "xilinx.com:interface:aximm:1.0 D_M_AXI ARPROT";
  ATTRIBUTE X_INTERFACE_INFO OF D_M_AXI_ARQOS: SIGNAL IS "xilinx.com:interface:aximm:1.0 D_M_AXI ARQOS";
  ATTRIBUTE X_INTERFACE_INFO OF D_M_AXI_ARREADY: SIGNAL IS "xilinx.com:interface:aximm:1.0 D_M_AXI ARREADY";
  ATTRIBUTE X_INTERFACE_INFO OF D_M_AXI_ARSIZE: SIGNAL IS "xilinx.com:interface:aximm:1.0 D_M_AXI ARSIZE";
  ATTRIBUTE X_INTERFACE_INFO OF D_M_AXI_ARUSER: SIGNAL IS "xilinx.com:interface:aximm:1.0 D_M_AXI ARUSER";
  ATTRIBUTE X_INTERFACE_INFO OF D_M_AXI_ARVALID: SIGNAL IS "xilinx.com:interface:aximm:1.0 D_M_AXI ARVALID";
  ATTRIBUTE X_INTERFACE_INFO OF D_M_AXI_AWADDR: SIGNAL IS "xilinx.com:interface:aximm:1.0 D_M_AXI AWADDR";
  ATTRIBUTE X_INTERFACE_INFO OF D_M_AXI_AWBURST: SIGNAL IS "xilinx.com:interface:aximm:1.0 D_M_AXI AWBURST";
  ATTRIBUTE X_INTERFACE_INFO OF D_M_AXI_AWCACHE: SIGNAL IS "xilinx.com:interface:aximm:1.0 D_M_AXI AWCACHE";
  ATTRIBUTE X_INTERFACE_INFO OF D_M_AXI_AWID: SIGNAL IS "xilinx.com:interface:aximm:1.0 D_M_AXI AWID";
  ATTRIBUTE X_INTERFACE_MODE OF D_M_AXI_AWID: SIGNAL IS "master D_M_AXI";
  ATTRIBUTE X_INTERFACE_PARAMETER OF D_M_AXI_AWID: SIGNAL IS "XIL_INTERFACENAME D_M_AXI, DATA_WIDTH 32, PROTOCOL AXI4, FREQ_HZ 100000000, ID_WIDTH 1, ADDR_WIDTH 32, AWUSER_WIDTH 1, ARUSER_WIDTH 1, WUSER_WIDTH 1, RUSER_WIDTH 1, BUSER_WIDTH 1, READ_WRITE_MODE READ_WRITE, HAS_BURST 1, HAS_LOCK 1, HAS_PROT 1, HAS_CACHE 1, HAS_QOS 1, HAS_REGION 0, HAS_WSTRB 1, HAS_BRESP 1, HAS_RRESP 1, SUPPORTS_NARROW_BURST 1, NUM_READ_OUTSTANDING 2, NUM_WRITE_OUTSTANDING 2, MAX_BURST_LENGTH 256, PHASE 0.0, CLK_DOMAIN /clk_wiz_clk_out1, NUM_READ_THREADS 1, NUM_WRITE_THREADS 1, " & 
"RUSER_BITS_PER_BYTE 0, WUSER_BITS_PER_BYTE 0, INSERT_VIP 0";
  ATTRIBUTE X_INTERFACE_INFO OF D_M_AXI_AWLEN: SIGNAL IS "xilinx.com:interface:aximm:1.0 D_M_AXI AWLEN";
  ATTRIBUTE X_INTERFACE_INFO OF D_M_AXI_AWLOCK: SIGNAL IS "xilinx.com:interface:aximm:1.0 D_M_AXI AWLOCK";
  ATTRIBUTE X_INTERFACE_INFO OF D_M_AXI_AWPROT: SIGNAL IS "xilinx.com:interface:aximm:1.0 D_M_AXI AWPROT";
  ATTRIBUTE X_INTERFACE_INFO OF D_M_AXI_AWQOS: SIGNAL IS "xilinx.com:interface:aximm:1.0 D_M_AXI AWQOS";
  ATTRIBUTE X_INTERFACE_INFO OF D_M_AXI_AWREADY: SIGNAL IS "xilinx.com:interface:aximm:1.0 D_M_AXI AWREADY";
  ATTRIBUTE X_INTERFACE_INFO OF D_M_AXI_AWSIZE: SIGNAL IS "xilinx.com:interface:aximm:1.0 D_M_AXI AWSIZE";
  ATTRIBUTE X_INTERFACE_INFO OF D_M_AXI_AWUSER: SIGNAL IS "xilinx.com:interface:aximm:1.0 D_M_AXI AWUSER";
  ATTRIBUTE X_INTERFACE_INFO OF D_M_AXI_AWVALID: SIGNAL IS "xilinx.com:interface:aximm:1.0 D_M_AXI AWVALID";
  ATTRIBUTE X_INTERFACE_INFO OF D_M_AXI_BID: SIGNAL IS "xilinx.com:interface:aximm:1.0 D_M_AXI BID";
  ATTRIBUTE X_INTERFACE_INFO OF D_M_AXI_BREADY: SIGNAL IS "xilinx.com:interface:aximm:1.0 D_M_AXI BREADY";
  ATTRIBUTE X_INTERFACE_INFO OF D_M_AXI_BRESP: SIGNAL IS "xilinx.com:interface:aximm:1.0 D_M_AXI BRESP";
  ATTRIBUTE X_INTERFACE_INFO OF D_M_AXI_BUSER: SIGNAL IS "xilinx.com:interface:aximm:1.0 D_M_AXI BUSER";
  ATTRIBUTE X_INTERFACE_INFO OF D_M_AXI_BVALID: SIGNAL IS "xilinx.com:interface:aximm:1.0 D_M_AXI BVALID";
  ATTRIBUTE X_INTERFACE_INFO OF D_M_AXI_RDATA: SIGNAL IS "xilinx.com:interface:aximm:1.0 D_M_AXI RDATA";
  ATTRIBUTE X_INTERFACE_INFO OF D_M_AXI_RID: SIGNAL IS "xilinx.com:interface:aximm:1.0 D_M_AXI RID";
  ATTRIBUTE X_INTERFACE_INFO OF D_M_AXI_RLAST: SIGNAL IS "xilinx.com:interface:aximm:1.0 D_M_AXI RLAST";
  ATTRIBUTE X_INTERFACE_INFO OF D_M_AXI_RREADY: SIGNAL IS "xilinx.com:interface:aximm:1.0 D_M_AXI RREADY";
  ATTRIBUTE X_INTERFACE_INFO OF D_M_AXI_RRESP: SIGNAL IS "xilinx.com:interface:aximm:1.0 D_M_AXI RRESP";
  ATTRIBUTE X_INTERFACE_INFO OF D_M_AXI_RUSER: SIGNAL IS "xilinx.com:interface:aximm:1.0 D_M_AXI RUSER";
  ATTRIBUTE X_INTERFACE_INFO OF D_M_AXI_RVALID: SIGNAL IS "xilinx.com:interface:aximm:1.0 D_M_AXI RVALID";
  ATTRIBUTE X_INTERFACE_INFO OF D_M_AXI_WDATA: SIGNAL IS "xilinx.com:interface:aximm:1.0 D_M_AXI WDATA";
  ATTRIBUTE X_INTERFACE_INFO OF D_M_AXI_WLAST: SIGNAL IS "xilinx.com:interface:aximm:1.0 D_M_AXI WLAST";
  ATTRIBUTE X_INTERFACE_INFO OF D_M_AXI_WREADY: SIGNAL IS "xilinx.com:interface:aximm:1.0 D_M_AXI WREADY";
  ATTRIBUTE X_INTERFACE_INFO OF D_M_AXI_WSTRB: SIGNAL IS "xilinx.com:interface:aximm:1.0 D_M_AXI WSTRB";
  ATTRIBUTE X_INTERFACE_INFO OF D_M_AXI_WUSER: SIGNAL IS "xilinx.com:interface:aximm:1.0 D_M_AXI WUSER";
  ATTRIBUTE X_INTERFACE_INFO OF D_M_AXI_WVALID: SIGNAL IS "xilinx.com:interface:aximm:1.0 D_M_AXI WVALID";
  ATTRIBUTE X_INTERFACE_INFO OF I_M_AXI_ARADDR: SIGNAL IS "xilinx.com:interface:aximm:1.0 I_M_AXI ARADDR";
  ATTRIBUTE X_INTERFACE_INFO OF I_M_AXI_ARBURST: SIGNAL IS "xilinx.com:interface:aximm:1.0 I_M_AXI ARBURST";
  ATTRIBUTE X_INTERFACE_INFO OF I_M_AXI_ARCACHE: SIGNAL IS "xilinx.com:interface:aximm:1.0 I_M_AXI ARCACHE";
  ATTRIBUTE X_INTERFACE_INFO OF I_M_AXI_ARID: SIGNAL IS "xilinx.com:interface:aximm:1.0 I_M_AXI ARID";
  ATTRIBUTE X_INTERFACE_INFO OF I_M_AXI_ARLEN: SIGNAL IS "xilinx.com:interface:aximm:1.0 I_M_AXI ARLEN";
  ATTRIBUTE X_INTERFACE_INFO OF I_M_AXI_ARLOCK: SIGNAL IS "xilinx.com:interface:aximm:1.0 I_M_AXI ARLOCK";
  ATTRIBUTE X_INTERFACE_INFO OF I_M_AXI_ARPROT: SIGNAL IS "xilinx.com:interface:aximm:1.0 I_M_AXI ARPROT";
  ATTRIBUTE X_INTERFACE_INFO OF I_M_AXI_ARQOS: SIGNAL IS "xilinx.com:interface:aximm:1.0 I_M_AXI ARQOS";
  ATTRIBUTE X_INTERFACE_INFO OF I_M_AXI_ARREADY: SIGNAL IS "xilinx.com:interface:aximm:1.0 I_M_AXI ARREADY";
  ATTRIBUTE X_INTERFACE_INFO OF I_M_AXI_ARSIZE: SIGNAL IS "xilinx.com:interface:aximm:1.0 I_M_AXI ARSIZE";
  ATTRIBUTE X_INTERFACE_INFO OF I_M_AXI_ARUSER: SIGNAL IS "xilinx.com:interface:aximm:1.0 I_M_AXI ARUSER";
  ATTRIBUTE X_INTERFACE_INFO OF I_M_AXI_ARVALID: SIGNAL IS "xilinx.com:interface:aximm:1.0 I_M_AXI ARVALID";
  ATTRIBUTE X_INTERFACE_INFO OF I_M_AXI_AWADDR: SIGNAL IS "xilinx.com:interface:aximm:1.0 I_M_AXI AWADDR";
  ATTRIBUTE X_INTERFACE_INFO OF I_M_AXI_AWBURST: SIGNAL IS "xilinx.com:interface:aximm:1.0 I_M_AXI AWBURST";
  ATTRIBUTE X_INTERFACE_INFO OF I_M_AXI_AWCACHE: SIGNAL IS "xilinx.com:interface:aximm:1.0 I_M_AXI AWCACHE";
  ATTRIBUTE X_INTERFACE_INFO OF I_M_AXI_AWID: SIGNAL IS "xilinx.com:interface:aximm:1.0 I_M_AXI AWID";
  ATTRIBUTE X_INTERFACE_MODE OF I_M_AXI_AWID: SIGNAL IS "master I_M_AXI";
  ATTRIBUTE X_INTERFACE_PARAMETER OF I_M_AXI_AWID: SIGNAL IS "XIL_INTERFACENAME I_M_AXI, DATA_WIDTH 32, PROTOCOL AXI4, FREQ_HZ 100000000, ID_WIDTH 1, ADDR_WIDTH 32, AWUSER_WIDTH 1, ARUSER_WIDTH 1, WUSER_WIDTH 1, RUSER_WIDTH 1, BUSER_WIDTH 1, READ_WRITE_MODE READ_WRITE, HAS_BURST 1, HAS_LOCK 1, HAS_PROT 1, HAS_CACHE 1, HAS_QOS 1, HAS_REGION 0, HAS_WSTRB 1, HAS_BRESP 1, HAS_RRESP 1, SUPPORTS_NARROW_BURST 1, NUM_READ_OUTSTANDING 2, NUM_WRITE_OUTSTANDING 2, MAX_BURST_LENGTH 256, PHASE 0.0, CLK_DOMAIN /clk_wiz_clk_out1, NUM_READ_THREADS 1, NUM_WRITE_THREADS 1, " & 
"RUSER_BITS_PER_BYTE 0, WUSER_BITS_PER_BYTE 0, INSERT_VIP 0";
  ATTRIBUTE X_INTERFACE_INFO OF I_M_AXI_AWLEN: SIGNAL IS "xilinx.com:interface:aximm:1.0 I_M_AXI AWLEN";
  ATTRIBUTE X_INTERFACE_INFO OF I_M_AXI_AWLOCK: SIGNAL IS "xilinx.com:interface:aximm:1.0 I_M_AXI AWLOCK";
  ATTRIBUTE X_INTERFACE_INFO OF I_M_AXI_AWPROT: SIGNAL IS "xilinx.com:interface:aximm:1.0 I_M_AXI AWPROT";
  ATTRIBUTE X_INTERFACE_INFO OF I_M_AXI_AWQOS: SIGNAL IS "xilinx.com:interface:aximm:1.0 I_M_AXI AWQOS";
  ATTRIBUTE X_INTERFACE_INFO OF I_M_AXI_AWREADY: SIGNAL IS "xilinx.com:interface:aximm:1.0 I_M_AXI AWREADY";
  ATTRIBUTE X_INTERFACE_INFO OF I_M_AXI_AWSIZE: SIGNAL IS "xilinx.com:interface:aximm:1.0 I_M_AXI AWSIZE";
  ATTRIBUTE X_INTERFACE_INFO OF I_M_AXI_AWUSER: SIGNAL IS "xilinx.com:interface:aximm:1.0 I_M_AXI AWUSER";
  ATTRIBUTE X_INTERFACE_INFO OF I_M_AXI_AWVALID: SIGNAL IS "xilinx.com:interface:aximm:1.0 I_M_AXI AWVALID";
  ATTRIBUTE X_INTERFACE_INFO OF I_M_AXI_BID: SIGNAL IS "xilinx.com:interface:aximm:1.0 I_M_AXI BID";
  ATTRIBUTE X_INTERFACE_INFO OF I_M_AXI_BREADY: SIGNAL IS "xilinx.com:interface:aximm:1.0 I_M_AXI BREADY";
  ATTRIBUTE X_INTERFACE_INFO OF I_M_AXI_BRESP: SIGNAL IS "xilinx.com:interface:aximm:1.0 I_M_AXI BRESP";
  ATTRIBUTE X_INTERFACE_INFO OF I_M_AXI_BUSER: SIGNAL IS "xilinx.com:interface:aximm:1.0 I_M_AXI BUSER";
  ATTRIBUTE X_INTERFACE_INFO OF I_M_AXI_BVALID: SIGNAL IS "xilinx.com:interface:aximm:1.0 I_M_AXI BVALID";
  ATTRIBUTE X_INTERFACE_INFO OF I_M_AXI_RDATA: SIGNAL IS "xilinx.com:interface:aximm:1.0 I_M_AXI RDATA";
  ATTRIBUTE X_INTERFACE_INFO OF I_M_AXI_RID: SIGNAL IS "xilinx.com:interface:aximm:1.0 I_M_AXI RID";
  ATTRIBUTE X_INTERFACE_INFO OF I_M_AXI_RLAST: SIGNAL IS "xilinx.com:interface:aximm:1.0 I_M_AXI RLAST";
  ATTRIBUTE X_INTERFACE_INFO OF I_M_AXI_RREADY: SIGNAL IS "xilinx.com:interface:aximm:1.0 I_M_AXI RREADY";
  ATTRIBUTE X_INTERFACE_INFO OF I_M_AXI_RRESP: SIGNAL IS "xilinx.com:interface:aximm:1.0 I_M_AXI RRESP";
  ATTRIBUTE X_INTERFACE_INFO OF I_M_AXI_RUSER: SIGNAL IS "xilinx.com:interface:aximm:1.0 I_M_AXI RUSER";
  ATTRIBUTE X_INTERFACE_INFO OF I_M_AXI_RVALID: SIGNAL IS "xilinx.com:interface:aximm:1.0 I_M_AXI RVALID";
  ATTRIBUTE X_INTERFACE_INFO OF I_M_AXI_WDATA: SIGNAL IS "xilinx.com:interface:aximm:1.0 I_M_AXI WDATA";
  ATTRIBUTE X_INTERFACE_INFO OF I_M_AXI_WLAST: SIGNAL IS "xilinx.com:interface:aximm:1.0 I_M_AXI WLAST";
  ATTRIBUTE X_INTERFACE_INFO OF I_M_AXI_WREADY: SIGNAL IS "xilinx.com:interface:aximm:1.0 I_M_AXI WREADY";
  ATTRIBUTE X_INTERFACE_INFO OF I_M_AXI_WSTRB: SIGNAL IS "xilinx.com:interface:aximm:1.0 I_M_AXI WSTRB";
  ATTRIBUTE X_INTERFACE_INFO OF I_M_AXI_WUSER: SIGNAL IS "xilinx.com:interface:aximm:1.0 I_M_AXI WUSER";
  ATTRIBUTE X_INTERFACE_INFO OF I_M_AXI_WVALID: SIGNAL IS "xilinx.com:interface:aximm:1.0 I_M_AXI WVALID";
  ATTRIBUTE X_INTERFACE_INFO OF RESET: SIGNAL IS "xilinx.com:signal:reset:1.0 RESET RST";
  ATTRIBUTE X_INTERFACE_MODE OF RESET: SIGNAL IS "slave RESET";
  ATTRIBUTE X_INTERFACE_PARAMETER OF RESET: SIGNAL IS "XIL_INTERFACENAME RESET, POLARITY ACTIVE_HIGH, INSERT_VIP 0";
BEGIN
  U0 : microprocessor
    GENERIC MAP (
      C_M_TARGET_SLAVE_BASE_ADDR => X"00000000",
      C_M_AXI_BURST_LEN => 1,
      C_M_AXI_ID_WIDTH => 1,
      C_M_AXI_ADDR_WIDTH => 32,
      C_M_AXI_DATA_WIDTH => 32,
      C_M_AXI_AWUSER_WIDTH => 1,
      C_M_AXI_ARUSER_WIDTH => 1,
      C_M_AXI_WUSER_WIDTH => 1,
      C_M_AXI_RUSER_WIDTH => 1,
      C_M_AXI_BUSER_WIDTH => 1
    )
    PORT MAP (
      CLK => CLK,
      RESET => RESET,
      I_M_AXI_AWID => I_M_AXI_AWID,
      I_M_AXI_AWADDR => I_M_AXI_AWADDR,
      I_M_AXI_AWLEN => I_M_AXI_AWLEN,
      I_M_AXI_AWSIZE => I_M_AXI_AWSIZE,
      I_M_AXI_AWBURST => I_M_AXI_AWBURST,
      I_M_AXI_AWLOCK => I_M_AXI_AWLOCK,
      I_M_AXI_AWCACHE => I_M_AXI_AWCACHE,
      I_M_AXI_AWPROT => I_M_AXI_AWPROT,
      I_M_AXI_AWQOS => I_M_AXI_AWQOS,
      I_M_AXI_AWUSER => I_M_AXI_AWUSER,
      I_M_AXI_AWVALID => I_M_AXI_AWVALID,
      I_M_AXI_AWREADY => I_M_AXI_AWREADY,
      I_M_AXI_WDATA => I_M_AXI_WDATA,
      I_M_AXI_WSTRB => I_M_AXI_WSTRB,
      I_M_AXI_WLAST => I_M_AXI_WLAST,
      I_M_AXI_WUSER => I_M_AXI_WUSER,
      I_M_AXI_WVALID => I_M_AXI_WVALID,
      I_M_AXI_WREADY => I_M_AXI_WREADY,
      I_M_AXI_BID => I_M_AXI_BID,
      I_M_AXI_BRESP => I_M_AXI_BRESP,
      I_M_AXI_BUSER => I_M_AXI_BUSER,
      I_M_AXI_BVALID => I_M_AXI_BVALID,
      I_M_AXI_BREADY => I_M_AXI_BREADY,
      I_M_AXI_ARID => I_M_AXI_ARID,
      I_M_AXI_ARADDR => I_M_AXI_ARADDR,
      I_M_AXI_ARLEN => I_M_AXI_ARLEN,
      I_M_AXI_ARSIZE => I_M_AXI_ARSIZE,
      I_M_AXI_ARBURST => I_M_AXI_ARBURST,
      I_M_AXI_ARLOCK => I_M_AXI_ARLOCK,
      I_M_AXI_ARCACHE => I_M_AXI_ARCACHE,
      I_M_AXI_ARPROT => I_M_AXI_ARPROT,
      I_M_AXI_ARQOS => I_M_AXI_ARQOS,
      I_M_AXI_ARUSER => I_M_AXI_ARUSER,
      I_M_AXI_ARVALID => I_M_AXI_ARVALID,
      I_M_AXI_ARREADY => I_M_AXI_ARREADY,
      I_M_AXI_RID => I_M_AXI_RID,
      I_M_AXI_RDATA => I_M_AXI_RDATA,
      I_M_AXI_RRESP => I_M_AXI_RRESP,
      I_M_AXI_RLAST => I_M_AXI_RLAST,
      I_M_AXI_RUSER => I_M_AXI_RUSER,
      I_M_AXI_RVALID => I_M_AXI_RVALID,
      I_M_AXI_RREADY => I_M_AXI_RREADY,
      D_M_AXI_AWID => D_M_AXI_AWID,
      D_M_AXI_AWADDR => D_M_AXI_AWADDR,
      D_M_AXI_AWLEN => D_M_AXI_AWLEN,
      D_M_AXI_AWSIZE => D_M_AXI_AWSIZE,
      D_M_AXI_AWBURST => D_M_AXI_AWBURST,
      D_M_AXI_AWLOCK => D_M_AXI_AWLOCK,
      D_M_AXI_AWCACHE => D_M_AXI_AWCACHE,
      D_M_AXI_AWPROT => D_M_AXI_AWPROT,
      D_M_AXI_AWQOS => D_M_AXI_AWQOS,
      D_M_AXI_AWUSER => D_M_AXI_AWUSER,
      D_M_AXI_AWVALID => D_M_AXI_AWVALID,
      D_M_AXI_AWREADY => D_M_AXI_AWREADY,
      D_M_AXI_WDATA => D_M_AXI_WDATA,
      D_M_AXI_WSTRB => D_M_AXI_WSTRB,
      D_M_AXI_WLAST => D_M_AXI_WLAST,
      D_M_AXI_WUSER => D_M_AXI_WUSER,
      D_M_AXI_WVALID => D_M_AXI_WVALID,
      D_M_AXI_WREADY => D_M_AXI_WREADY,
      D_M_AXI_BID => D_M_AXI_BID,
      D_M_AXI_BRESP => D_M_AXI_BRESP,
      D_M_AXI_BUSER => D_M_AXI_BUSER,
      D_M_AXI_BVALID => D_M_AXI_BVALID,
      D_M_AXI_BREADY => D_M_AXI_BREADY,
      D_M_AXI_ARID => D_M_AXI_ARID,
      D_M_AXI_ARADDR => D_M_AXI_ARADDR,
      D_M_AXI_ARLEN => D_M_AXI_ARLEN,
      D_M_AXI_ARSIZE => D_M_AXI_ARSIZE,
      D_M_AXI_ARBURST => D_M_AXI_ARBURST,
      D_M_AXI_ARLOCK => D_M_AXI_ARLOCK,
      D_M_AXI_ARCACHE => D_M_AXI_ARCACHE,
      D_M_AXI_ARPROT => D_M_AXI_ARPROT,
      D_M_AXI_ARQOS => D_M_AXI_ARQOS,
      D_M_AXI_ARUSER => D_M_AXI_ARUSER,
      D_M_AXI_ARVALID => D_M_AXI_ARVALID,
      D_M_AXI_ARREADY => D_M_AXI_ARREADY,
      D_M_AXI_RID => D_M_AXI_RID,
      D_M_AXI_RDATA => D_M_AXI_RDATA,
      D_M_AXI_RRESP => D_M_AXI_RRESP,
      D_M_AXI_RLAST => D_M_AXI_RLAST,
      D_M_AXI_RUSER => D_M_AXI_RUSER,
      D_M_AXI_RVALID => D_M_AXI_RVALID,
      D_M_AXI_RREADY => D_M_AXI_RREADY
    );
END system_microprocessor_0_0_arch;
